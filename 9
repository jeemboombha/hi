<ng-template #linkTemplate let-link>
  <svg:g class="edge">
    <svg:path
      class="line"
      stroke="black"
      stroke-width="2"
      [attr.d]="generateElbowPath(link)"
      [attr.id]="link.id"
      marker-end="url(#arrow)">
    </svg:path>
    <svg:text class="edge-label" text-anchor="middle">
      <textPath [attr.href]="'#' + link.id" startOffset="50%">
        {{ link.label }}
      </textPath>
    </svg:text>
  </svg:g>
</ng-template>




generateElbowPath(link: any): string {
  const points = link.points;
  if (!points || points.length < 2) return '';

  const pathParts = [];

  pathParts.push(`M ${points[0].x},${points[0].y}`);

  for (let i = 1; i < points.length; i++) {
    const prev = points[i - 1];
    const curr = points[i];

    const dx = curr.x - prev.x;
    const dy = curr.y - prev.y;

    const radius = 10;

    // For the first straight line
    if (i === 1) {
      pathParts.push(`L ${curr.x},${curr.y}`);
      continue;
    }

    // For bends: draw a rounded corner
    const prevPrev = points[i - 2];
    if (!prevPrev) continue;

    const bendX = prev.x;
    const bendY = prev.y;

    // Determine corner direction
    const horizontalFirst = Math.abs(dx) > Math.abs(dy);

    // Draw rounded corner
    pathParts.push(`Q ${bendX},${bendY} ${curr.x},${curr.y}`);
  }

  return pathParts.join(' ');
}






generateElbowPath(link: any): string {
  const points = link.points;
  if (!points || points.length < 2) return '';

  let path = `M ${points[0].x} ${points[0].y}`;

  for (let i = 1; i < points.length; i++) {
    const prev = points[i - 1];
    const curr = points[i];

    // Only horizontal or vertical lines
    if (prev.x !== curr.x && prev.y !== curr.y) {
      // 90 degree corner: move horizontally, then vertically
      path += ` L ${curr.x} ${prev.y}`;
    }

    path += ` L ${curr.x} ${curr.y}`;
  }

  return path;
}







generateRoundedElbowPath(link: any): string {
  const points = link.points;
  if (!points || points.length < 2) return '';

  const radius = 8; // adjust to make curves tighter or looser
  let path = `M ${points[0].x} ${points[0].y}`;

  for (let i = 1; i < points.length - 1; i++) {
    const prev = points[i - 1];
    const curr = points[i];
    const next = points[i + 1];

    const dx1 = curr.x - prev.x;
    const dy1 = curr.y - prev.y;
    const dx2 = next.x - curr.x;
    const dy2 = next.y - curr.y;

    // Only smooth 90Â° turns
    if ((dx1 === 0 && dy2 === 0) || (dy1 === 0 && dx2 === 0)) {
      const x = curr.x;
      const y = curr.y;

      const x1 = x - Math.sign(dx1 || dx2) * radius;
      const y1 = y - Math.sign(dy1 || dy2) * radius;

      path += ` L ${x1} ${y1}`;
      path += ` Q ${x} ${y} ${x + Math.sign(dx2) * radius} ${y + Math.sign(dy2) * radius}`;
    } else {
      path += ` L ${curr.x} ${curr.y}`;
    }
  }

  const last = points[points.length - 1];
  path += ` L ${last.x} ${last.y}`;

  return path;
}







.edge .line {
  fill: none;
  stroke: #333;
  stroke-width: 2;
}

.edge .edge-label {
  font-size: 12px;
  fill: #444;
}





layout = {
  name: 'custom',
  engine: (nodes, links, clusters) => {
    const updatedLinks = links.map(link => {
      const source = nodes.find(n => n.id === link.source);
      const target = nodes.find(n => n.id === link.target);
      const midX = (source.position.x + target.position.x) / 2;

      return {
        ...link,
        points: [
          { x: source.position.x, y: source.position.y },
          { x: midX, y: source.position.y },
          { x: midX, y: target.position.y },
          { x: target.position.x, y: target.position.y }
        ]
      };
    });

    return { nodes, links: updatedLinks, clusters };
  }
};





ngAfterViewInit() {
  setTimeout(() => {
    this.links = this.links.map(link => {
      const points = link.points;
      if (points && points.length >= 2) {
        const p0 = points[0];
        const p1 = points[points.length - 1];
        const midX = (p0.x + p1.x) / 2;

        link.points = [
          { x: p0.x, y: p0.y },
          { x: midX, y: p0.y },
          { x: midX, y: p1.y },
          { x: p1.x, y: p1.y }
        ];
      }
      return link;
    });
  }, 100); // allow layout to settle
}

buildPathFromPoints(points: { x: number; y: number }[]): string {
  if (!points || points.length === 0) return '';

  let path = `M ${points[0].x},${points[0].y}`;
  for (let i = 1; i < points.length; i++) {
    path += ` L ${points[i].x},${points[i].y}`;
  }
  return path;
}


<svg:path
  class="line"
  stroke="black"
  stroke-width="2"
  fill="none"
  [attr.d]="buildPathFromPoints(link.points)"
  marker-end="url(#arrow)" />


